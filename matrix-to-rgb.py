# -*- coding: utf-8 -*-
"""T3 PP.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FAC6m5RoeRkvNsMAyOP8riS176byJjER

Installation Setup
"""

# Commented out IPython magic to ensure Python compatibility.
!pip install git+git://github.com/andreinechaev/nvcc4jupyter.git
# %load_ext nvcc_plugin

"""# I) Soma de prefixos da Matriz A

### Algoritmo N‚Å∞ 1 - Sequencial
"""

# Commented out IPython magic to ensure Python compatibility.
# %%cu
# 
# #include <stdio.h>
# #include <stdlib.h>
# #include <time.h>
# #include <unistd.h>
# #define N 32
# 
# int main() {
#   int values[N][N];
#   int psa[N][N];
#   double time = 0.0;
# 
#   // PREENCHE OS VETORES
#   for (long int i = 0; i < N; i++) {
#     for (long int j = 0; j < N; j++) {
#       values[i][j] = 1 + rand() % 500;
#       psa[i][j] = values[i][j];
#     }
#   }
#   // PRINTA OS VETORES
#   /* for (int i = 0; i < N; i++) {
#     for (int j = 0; j < N; j++) {
#       printf("%i ", values[i][j]);
#     }
#     printf("\n");
#   } */
# 
#   // FAZ A SOMA DOS PREFIXOS E COLETA O TEMPO
# 
#   clock_t begin = clock();
#   
#   for (int i = 0; i < N; i++) {
#     for (int j = 0; j < N; j++) {
#       psa[i][j] =
#           psa[i - 1][j] + psa[i][j - 1] - psa[i - 1][j - 1] + values[i][j];
#     }
#   }
# 
#   clock_t end = clock();
#   time += (double)(end - begin) / CLOCKS_PER_SEC;
# 
#   printf("\n ------------------------ \n");
# 
#   // PRINTA OS PREFIXOS
#   /*  for (int i = 0; i < N; i++) {
#      for (int j = 0; j < N; j++) {
#        printf("%i ", psa[i][j]);
#      }
#      printf("\n");
#    } */
# 
#   printf("Tempo gasto: %f ms \n", time * 1000);
# }